/**
 * Trabble Backend API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { BotCardModel } from '../model/botCardModel';
import { CardDTO } from '../model/cardDTO';
import { DataResponseModelBaseModel } from '../model/dataResponseModelBaseModel';
import { DataResponseModelListAssociatedQuestionDTO } from '../model/dataResponseModelListAssociatedQuestionDTO';
import { DataResponseModelListBaseModel } from '../model/dataResponseModelListBaseModel';
import { DataResponseModelListCardDTO } from '../model/dataResponseModelListCardDTO';
import { DataResponseModelListKeywordDTO } from '../model/dataResponseModelListKeywordDTO';
import { DataResponseModelListListCardDTO } from '../model/dataResponseModelListListCardDTO';
import { DataResponseModelPaginationResponseModelListCardDTO } from '../model/dataResponseModelPaginationResponseModelListCardDTO';
import { FbCardModel } from '../model/fbCardModel';
import { NewCardActionDTO } from '../model/newCardActionDTO';
import { NewCardActionResult } from '../model/newCardActionResult';
import { NoDataResponseModel } from '../model/noDataResponseModel';
import { Operation } from '../model/operation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CardsService {

    protected basePath = 'https://trabbletestapp.azurewebsites.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Cards_AddNewAction
     * 
     * @param cardId 
     * @param newActions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsAddNewAction(cardId: string, newActions?: Array<NewCardActionDTO>, observe?: 'body', reportProgress?: boolean): Observable<Array<NewCardActionResult>>;
    public cardsAddNewAction(cardId: string, newActions?: Array<NewCardActionDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NewCardActionResult>>>;
    public cardsAddNewAction(cardId: string, newActions?: Array<NewCardActionDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NewCardActionResult>>>;
    public cardsAddNewAction(cardId: string, newActions?: Array<NewCardActionDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cardId === null || cardId === undefined) {
            throw new Error('Required parameter cardId was null or undefined when calling cardsAddNewAction.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Array<NewCardActionResult>>(`${this.basePath}/api/Cards/${encodeURIComponent(String(cardId))}/CardActions`,
            newActions,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_AsBotCard
     * 
     * @param cardId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsAsBotCard(cardId: string, observe?: 'body', reportProgress?: boolean): Observable<BotCardModel>;
    public cardsAsBotCard(cardId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BotCardModel>>;
    public cardsAsBotCard(cardId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BotCardModel>>;
    public cardsAsBotCard(cardId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cardId === null || cardId === undefined) {
            throw new Error('Required parameter cardId was null or undefined when calling cardsAsBotCard.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<BotCardModel>(`${this.basePath}/api/Cards/${encodeURIComponent(String(cardId))}/botcard`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_AsFacebookCard
     * 
     * @param cardId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsAsFacebookCard(cardId: string, observe?: 'body', reportProgress?: boolean): Observable<FbCardModel>;
    public cardsAsFacebookCard(cardId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FbCardModel>>;
    public cardsAsFacebookCard(cardId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FbCardModel>>;
    public cardsAsFacebookCard(cardId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cardId === null || cardId === undefined) {
            throw new Error('Required parameter cardId was null or undefined when calling cardsAsFacebookCard.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<FbCardModel>(`${this.basePath}/api/Cards/${encodeURIComponent(String(cardId))}/facebookcard`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_Create
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsCreate(model?: CardDTO, observe?: 'body', reportProgress?: boolean): Observable<NoDataResponseModel>;
    public cardsCreate(model?: CardDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoDataResponseModel>>;
    public cardsCreate(model?: CardDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoDataResponseModel>>;
    public cardsCreate(model?: CardDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<NoDataResponseModel>(`${this.basePath}/api/Cards`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_Delete
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<NoDataResponseModel>;
    public cardsDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoDataResponseModel>>;
    public cardsDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoDataResponseModel>>;
    public cardsDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cardsDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<NoDataResponseModel>(`${this.basePath}/api/Cards/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_Get
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<DataResponseModelBaseModel>;
    public cardsGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataResponseModelBaseModel>>;
    public cardsGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataResponseModelBaseModel>>;
    public cardsGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cardsGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataResponseModelBaseModel>(`${this.basePath}/api/Cards/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_GetAll
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsGetAll(observe?: 'body', reportProgress?: boolean): Observable<DataResponseModelListBaseModel>;
    public cardsGetAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataResponseModelListBaseModel>>;
    public cardsGetAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataResponseModelListBaseModel>>;
    public cardsGetAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataResponseModelListBaseModel>(`${this.basePath}/api/Cards`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_GetAssociatedQuestions
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsGetAssociatedQuestions(id: string, observe?: 'body', reportProgress?: boolean): Observable<DataResponseModelListAssociatedQuestionDTO>;
    public cardsGetAssociatedQuestions(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataResponseModelListAssociatedQuestionDTO>>;
    public cardsGetAssociatedQuestions(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataResponseModelListAssociatedQuestionDTO>>;
    public cardsGetAssociatedQuestions(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cardsGetAssociatedQuestions.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataResponseModelListAssociatedQuestionDTO>(`${this.basePath}/api/Cards/${encodeURIComponent(String(id))}/associated-questions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_GetCarousels
     * 
     * @param cardId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsGetCarousels(cardId: string, observe?: 'body', reportProgress?: boolean): Observable<DataResponseModelListCardDTO>;
    public cardsGetCarousels(cardId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataResponseModelListCardDTO>>;
    public cardsGetCarousels(cardId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataResponseModelListCardDTO>>;
    public cardsGetCarousels(cardId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cardId === null || cardId === undefined) {
            throw new Error('Required parameter cardId was null or undefined when calling cardsGetCarousels.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataResponseModelListCardDTO>(`${this.basePath}/api/Cards/${encodeURIComponent(String(cardId))}/Carousels`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_GetFollowOns
     * 
     * @param cardId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsGetFollowOns(cardId: string, observe?: 'body', reportProgress?: boolean): Observable<DataResponseModelListListCardDTO>;
    public cardsGetFollowOns(cardId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataResponseModelListListCardDTO>>;
    public cardsGetFollowOns(cardId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataResponseModelListListCardDTO>>;
    public cardsGetFollowOns(cardId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cardId === null || cardId === undefined) {
            throw new Error('Required parameter cardId was null or undefined when calling cardsGetFollowOns.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataResponseModelListListCardDTO>(`${this.basePath}/api/Cards/${encodeURIComponent(String(cardId))}/FollowOns`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_GetKeywords
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsGetKeywords(id: string, observe?: 'body', reportProgress?: boolean): Observable<DataResponseModelListKeywordDTO>;
    public cardsGetKeywords(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataResponseModelListKeywordDTO>>;
    public cardsGetKeywords(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataResponseModelListKeywordDTO>>;
    public cardsGetKeywords(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cardsGetKeywords.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataResponseModelListKeywordDTO>(`${this.basePath}/api/Cards/${encodeURIComponent(String(id))}/keywords`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_Patch
     * 
     * @param id 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsPatch(id: string, model?: Array<Operation>, observe?: 'body', reportProgress?: boolean): Observable<NoDataResponseModel>;
    public cardsPatch(id: string, model?: Array<Operation>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoDataResponseModel>>;
    public cardsPatch(id: string, model?: Array<Operation>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoDataResponseModel>>;
    public cardsPatch(id: string, model?: Array<Operation>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cardsPatch.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<NoDataResponseModel>(`${this.basePath}/api/Cards/${encodeURIComponent(String(id))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_Search
     * 
     * @param templateId 
     * @param pageIndex 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsSearch(templateId?: string, pageIndex?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<DataResponseModelPaginationResponseModelListCardDTO>;
    public cardsSearch(templateId?: string, pageIndex?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataResponseModelPaginationResponseModelListCardDTO>>;
    public cardsSearch(templateId?: string, pageIndex?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataResponseModelPaginationResponseModelListCardDTO>>;
    public cardsSearch(templateId?: string, pageIndex?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (templateId !== undefined) {
            queryParameters = queryParameters.set('TemplateId', <any>templateId);
        }
        if (pageIndex !== undefined) {
            queryParameters = queryParameters.set('PageIndex', <any>pageIndex);
        }
        if (pageSize !== undefined) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataResponseModelPaginationResponseModelListCardDTO>(`${this.basePath}/api/Cards/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_UpSert
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsUpSert(model?: CardDTO, observe?: 'body', reportProgress?: boolean): Observable<NoDataResponseModel>;
    public cardsUpSert(model?: CardDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoDataResponseModel>>;
    public cardsUpSert(model?: CardDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoDataResponseModel>>;
    public cardsUpSert(model?: CardDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<NoDataResponseModel>(`${this.basePath}/api/Cards/upsert`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cards_Update
     * 
     * @param id 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsUpdate(id: string, model?: CardDTO, observe?: 'body', reportProgress?: boolean): Observable<NoDataResponseModel>;
    public cardsUpdate(id: string, model?: CardDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoDataResponseModel>>;
    public cardsUpdate(id: string, model?: CardDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoDataResponseModel>>;
    public cardsUpdate(id: string, model?: CardDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cardsUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<NoDataResponseModel>(`${this.basePath}/api/Cards/${encodeURIComponent(String(id))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
