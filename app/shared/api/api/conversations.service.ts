/**
 * Trabble Backend API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ConversationDTO } from '../model/conversationDTO';
import { DataResponseModelBaseModel } from '../model/dataResponseModelBaseModel';
import { DataResponseModelListBaseModel } from '../model/dataResponseModelListBaseModel';
import { DataResponseModelListString } from '../model/dataResponseModelListString';
import { DataResponseModelPaginationResponseModelListConversationDTO } from '../model/dataResponseModelPaginationResponseModelListConversationDTO';
import { NoDataResponseModel } from '../model/noDataResponseModel';
import { Operation } from '../model/operation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ConversationsService {

    protected basePath = 'https://trabbletestapp.azurewebsites.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Conversation_Create
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public conversationCreate(model?: ConversationDTO, observe?: 'body', reportProgress?: boolean): Observable<NoDataResponseModel>;
    public conversationCreate(model?: ConversationDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoDataResponseModel>>;
    public conversationCreate(model?: ConversationDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoDataResponseModel>>;
    public conversationCreate(model?: ConversationDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<NoDataResponseModel>(`${this.basePath}/api/conversations`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Conversation_Delete
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public conversationDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<NoDataResponseModel>;
    public conversationDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoDataResponseModel>>;
    public conversationDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoDataResponseModel>>;
    public conversationDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling conversationDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<NoDataResponseModel>(`${this.basePath}/api/conversations/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Conversation_Get
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public conversationGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<DataResponseModelBaseModel>;
    public conversationGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataResponseModelBaseModel>>;
    public conversationGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataResponseModelBaseModel>>;
    public conversationGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling conversationGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataResponseModelBaseModel>(`${this.basePath}/api/conversations/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Conversation_GetActivites
     * 
     * @param id 
     * @param take 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public conversationGetActivites(id: string, take?: number, observe?: 'body', reportProgress?: boolean): Observable<DataResponseModelListString>;
    public conversationGetActivites(id: string, take?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataResponseModelListString>>;
    public conversationGetActivites(id: string, take?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataResponseModelListString>>;
    public conversationGetActivites(id: string, take?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling conversationGetActivites.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (take !== undefined) {
            queryParameters = queryParameters.set('take', <any>take);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataResponseModelListString>(`${this.basePath}/api/conversations/${encodeURIComponent(String(id))}/activities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Conversation_GetAll
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public conversationGetAll(observe?: 'body', reportProgress?: boolean): Observable<DataResponseModelListBaseModel>;
    public conversationGetAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataResponseModelListBaseModel>>;
    public conversationGetAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataResponseModelListBaseModel>>;
    public conversationGetAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataResponseModelListBaseModel>(`${this.basePath}/api/conversations`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Conversation_Patch
     * 
     * @param id 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public conversationPatch(id: string, model?: Array<Operation>, observe?: 'body', reportProgress?: boolean): Observable<NoDataResponseModel>;
    public conversationPatch(id: string, model?: Array<Operation>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoDataResponseModel>>;
    public conversationPatch(id: string, model?: Array<Operation>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoDataResponseModel>>;
    public conversationPatch(id: string, model?: Array<Operation>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling conversationPatch.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<NoDataResponseModel>(`${this.basePath}/api/conversations/${encodeURIComponent(String(id))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Conversation_Search
     * 
     * @param partnerId 
     * @param active 
     * @param conversationStatusId 
     * @param channelId 
     * @param pageIndex 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public conversationSearch(partnerId?: string, active?: boolean, conversationStatusId?: string, channelId?: string, pageIndex?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<DataResponseModelPaginationResponseModelListConversationDTO>;
    public conversationSearch(partnerId?: string, active?: boolean, conversationStatusId?: string, channelId?: string, pageIndex?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataResponseModelPaginationResponseModelListConversationDTO>>;
    public conversationSearch(partnerId?: string, active?: boolean, conversationStatusId?: string, channelId?: string, pageIndex?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataResponseModelPaginationResponseModelListConversationDTO>>;
    public conversationSearch(partnerId?: string, active?: boolean, conversationStatusId?: string, channelId?: string, pageIndex?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (partnerId !== undefined) {
            queryParameters = queryParameters.set('PartnerId', <any>partnerId);
        }
        if (active !== undefined) {
            queryParameters = queryParameters.set('Active', <any>active);
        }
        if (conversationStatusId !== undefined) {
            queryParameters = queryParameters.set('ConversationStatusId', <any>conversationStatusId);
        }
        if (channelId !== undefined) {
            queryParameters = queryParameters.set('ChannelId', <any>channelId);
        }
        if (pageIndex !== undefined) {
            queryParameters = queryParameters.set('PageIndex', <any>pageIndex);
        }
        if (pageSize !== undefined) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataResponseModelPaginationResponseModelListConversationDTO>(`${this.basePath}/api/conversations/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Conversation_SetConversationStatus
     * 
     * @param conversationId 
     * @param conversationStatusId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public conversationSetConversationStatus(conversationId: string, conversationStatusId: string, observe?: 'body', reportProgress?: boolean): Observable<NoDataResponseModel>;
    public conversationSetConversationStatus(conversationId: string, conversationStatusId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoDataResponseModel>>;
    public conversationSetConversationStatus(conversationId: string, conversationStatusId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoDataResponseModel>>;
    public conversationSetConversationStatus(conversationId: string, conversationStatusId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling conversationSetConversationStatus.');
        }
        if (conversationStatusId === null || conversationStatusId === undefined) {
            throw new Error('Required parameter conversationStatusId was null or undefined when calling conversationSetConversationStatus.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<NoDataResponseModel>(`${this.basePath}/api/conversations/${encodeURIComponent(String(conversationId))}/ConversationStatus/${encodeURIComponent(String(conversationStatusId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Conversation_UpSert
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public conversationUpSert(model?: ConversationDTO, observe?: 'body', reportProgress?: boolean): Observable<NoDataResponseModel>;
    public conversationUpSert(model?: ConversationDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoDataResponseModel>>;
    public conversationUpSert(model?: ConversationDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoDataResponseModel>>;
    public conversationUpSert(model?: ConversationDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<NoDataResponseModel>(`${this.basePath}/api/conversations/upsert`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Conversation_Update
     * 
     * @param id 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public conversationUpdate(id: string, model?: ConversationDTO, observe?: 'body', reportProgress?: boolean): Observable<NoDataResponseModel>;
    public conversationUpdate(id: string, model?: ConversationDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoDataResponseModel>>;
    public conversationUpdate(id: string, model?: ConversationDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoDataResponseModel>>;
    public conversationUpdate(id: string, model?: ConversationDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling conversationUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<NoDataResponseModel>(`${this.basePath}/api/conversations/${encodeURIComponent(String(id))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
